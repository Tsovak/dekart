syntax = "proto3";

option go_package = "./proto";

service Dekart {
    //reports
    rpc CreateReport(CreateReportRequest) returns (CreateReportResponse) {}
    rpc ForkReport(ForkReportRequest) returns (ForkReportResponse) {}
    rpc UpdateReport(UpdateReportRequest) returns (UpdateReportResponse) {}
    rpc ArchiveReport(ArchiveReportRequest) returns (ArchiveReportResponse) {}
    rpc SetDiscoverable(SetDiscoverableRequest) returns (SetDiscoverableResponse) {}

    // datasets
    rpc CreateDataset(CreateDatasetRequest) returns (CreateDatasetResponse) {}
    rpc RemoveDataset(RemoveDatasetRequest) returns (RemoveDatasetResponse) {}
    rpc UpdateDatasetName(UpdateDatasetNameRequest) returns (UpdateDatasetNameResponse) {}
    rpc UpdateDatasetConnection(UpdateDatasetConnectionRequest) returns (UpdateDatasetConnectionResponse) {}

    // files
    rpc CreateFile(CreateFileRequest) returns (CreateFileResponse) {}

    // queries
    rpc CreateQuery(CreateQueryRequest) returns (CreateQueryResponse) {}
    rpc RunQuery(RunQueryRequest) returns (RunQueryResponse) {}
    rpc CancelQuery(CancelQueryRequest) returns (CancelQueryResponse) {}

    rpc GetEnv(GetEnvRequest) returns (GetEnvResponse) {}

    // streams
    rpc GetReportStream(ReportStreamRequest) returns (stream ReportStreamResponse) {}
    rpc GetReportListStream(ReportListRequest) returns (stream ReportListResponse) {}
    rpc GetUserStream(GetUserStreamRequest) returns (stream GetUserStreamResponse) {}

    //statistics
    rpc GetUsage(GetUsageRequest) returns (GetUsageResponse) {}

    //connections
    rpc CreateConnection(CreateConnectionRequest) returns (CreateConnectionResponse) {}
    rpc UpdateConnection(UpdateConnectionRequest) returns (UpdateConnectionResponse) {}
    rpc ArchiveConnection(ArchiveConnectionRequest) returns (ArchiveConnectionResponse) {}
    rpc GetConnectionList(GetConnectionListRequest) returns (GetConnectionListResponse) {}
    rpc TestConnection(TestConnectionRequest) returns (TestConnectionResponse) {}

    //CLOUD

    //subscriptions
    rpc CreateSubscription(CreateSubscriptionRequest) returns (CreateSubscriptionResponse) {}
    rpc GetSubscription(GetSubscriptionRequest) returns (GetSubscriptionResponse) {}
    rpc CancelSubscription(CancelSubscriptionRequest) returns (CancelSubscriptionResponse) {}

}

message CancelSubscriptionRequest {
}

message CancelSubscriptionResponse {}

message GetSubscriptionRequest {
}

message Organization {
    string id = 1;
    string name = 2;
    bool personal = 3;
}

message Subscription {
    PlanType plan_type = 2;
    bool active = 3;
    int64 updated_at = 4;
}

message GetSubscriptionResponse {
    Subscription subscription = 1;
}

enum PlanType {
    TYPE_UNSPECIFIED = 0;
    TYPE_PERSONAL = 1;
    TYPE_TEAM = 2;
}

message CreateSubscriptionRequest {
    PlanType plan_type = 1;
    string ui_url = 2;
}

message CreateSubscriptionResponse {
    string redirect_url = 1;
}

message GetConnectionListRequest {
}

message GetConnectionListResponse {
    repeated Connection connections = 1;
}

message GetUserStreamRequest {
    StreamOptions stream_options = 1;
}
message GetUserStreamResponse {
    StreamOptions stream_options = 1;
    int64 connection_update = 2;
    string email = 3; // user email used to show user icon in UI

    // cloud
    bool subscription_active = 103;
    int64 subscription_update = 104;
}

message TestConnectionRequest {
    Connection connection = 1;
}

message TestConnectionResponse {
    bool success = 1;
    string error = 2;
}

message ArchiveConnectionRequest {
    string connection_id = 1;
}

message ArchiveConnectionResponse {
}

message UpdateConnectionRequest {
    Connection connection = 1;
}

message UpdateConnectionResponse {
    Connection connection = 1;
}

message CreateConnectionRequest {
    string connection_name = 1;
}

message CreateConnectionResponse {
    Connection connection = 1;
}

message Connection {
    string id = 1;
    string connection_name = 2;
    string bigquery_project_id = 3;
    string cloud_storage_bucket = 4;
    bool is_default = 5;
}

message GetUsageRequest {}

message GetUsageResponse {
    int64 total_reports = 1;
    int64 total_queries = 2;
    int64 total_files = 3;
    int64 total_authors = 4;
}

message SetDiscoverableRequest {
    string report_id = 1;
    bool discoverable = 2;
}

message SetDiscoverableResponse {
}

message RemoveDatasetRequest {
    string dataset_id = 1;
}

message RemoveDatasetResponse {
    string dataset_id = 1;
}

message StreamOptions {
    int64 sequence = 1;
}

message GetEnvRequest {}

message GetEnvResponse {
    message Variable {
        enum Type {
            TYPE_UNSPECIFIED = 0;
            TYPE_MAPBOX_TOKEN = 1;
            TYPE_UX_DATA_DOCUMENTATION = 2;
            TYPE_UX_HOMEPAGE = 3;
            TYPE_ALLOW_FILE_UPLOAD = 4;
            TYPE_DATASOURCE = 5;
            TYPE_STORAGE = 6;
            TYPE_REQUIRE_AMAZON_OIDC = 7;
            TYPE_REQUIRE_IAP = 8;
            TYPE_DISABLE_USAGE_STATS = 9;
            TYPE_REQUIRE_GOOGLE_OAUTH = 10;
            TYPE_BIGQUERY_PROJECT_ID = 11;
            TYPE_CLOUD_STORAGE_BUCKET = 12;
        }
        Type type = 1;
        string value = 2;
    }
    repeated Variable variables = 1;
}

// RedirectState is used to pass state between the server and the UI via redirect
message RedirectState {
    string token_json = 1;
    string error  = 2;
}

// AuthState is used to pass state between UI, auth endpoint and Google OAuth via redirect
message AuthState   {
    enum Action { // auth endpoint actions
        ACTION_UNSPECIFIED = 0;
        ACTION_REQUEST_CODE = 1; // request auth code from Google OAuth (invoked by UI)
        ACTION_REQUEST_TOKEN = 2; // request access token from Google OAuth (used as callback from Google OAuth)
        ACTION_REVOKE = 3; // revoke access token (invoked by UI)
    }
    Action action = 1;
    string auth_url = 2; // dekart backend url to handle auth request
    string ui_url = 3; // dekart frontend url to redirect to after auth
    string access_token_to_revoke = 4; // access token to revoke
    bool switch_account = 5; // if true, user will be requested to switch account
}

message ArchiveReportRequest {
    string report_id = 1;
    bool archive = 2;
}

message ArchiveReportResponse {}

message ReportListRequest{
    StreamOptions stream_options = 1;
}

message ReportListResponse {
    repeated Report reports = 1;
    StreamOptions stream_options = 2;
}

message Report {
    string id = 1;
    string map_config = 2;
    string title = 3;
    bool archived = 4;
    bool can_write = 5;
    string author_email = 6;
    bool discoverable = 7; // report is discoverable by other users of the same instance
}

message Dataset {
    string id = 1;
    string report_id = 2;
    string query_id = 3;
    int64 created_at = 4;
    int64 updated_at = 5;
    string file_id = 6;
    string name = 7;
    string connection_id = 8;
}

message Query {
    string id = 1;
    // string report_id = 2;
    string query_text = 3;

    enum JobStatus {
        JOB_STATUS_UNSPECIFIED = 0;
        JOB_STATUS_PENDING = 1;
        JOB_STATUS_RUNNING = 2;
        JOB_STATUS_DONE_LEGACY = 3;  // legacy for backwards compatibility
        JOB_STATUS_READING_RESULTS = 4; // job is done processing results
        JOB_STATUS_DONE = 5;
    }

    JobStatus job_status = 4;
    string job_result_id = 5;
    string job_error = 6;
    int64 job_duration = 7;
    int32 total_rows = 8;
    int64 bytes_processed = 9;
    int64 result_size = 10;
    int64 created_at = 11;
    int64 updated_at = 12;

    enum QuerySource {
        QUERY_SOURCE_UNSPECIFIED = 0;
        QUERY_SOURCE_INLINE = 1;
        QUERY_SOURCE_STORAGE = 2;
    }
    QuerySource query_source = 13;
    string query_source_id = 14;
}

message File {
    string id = 1;
    string name = 2;
    string mime_type = 3;
    int64 size = 4;
    string source_id = 5;
    int64 created_at = 6;
    int64 updated_at = 7;
    enum Status {
        STATUS_UNSPECIFIED = 0;
        STATUS_NEW = 1; // default initial state
        STATUS_RECEIVED = 2; // file uploaded by user to temp storage
        STATUS_STORED = 3; // file stored in permanent storage
    }
    Status file_status = 8;
    string upload_error = 9;
}

message UpdateReportRequest {
    Report report = 1;
    repeated Query query = 2;
}

message UpdateReportResponse {
}

message RunQueryRequest {
    string query_id = 1;
    string query_text = 2;
}

message RunQueryResponse {
}

message CancelQueryRequest {
    string query_id = 1;
}

message CancelQueryResponse {
}

message UpdateDatasetNameRequest {
    string dataset_id = 1;
    string name = 2;
}

message UpdateDatasetNameResponse {
}

message UpdateDatasetConnectionRequest {
    string dataset_id = 1;
    string connection_id = 2;
}

message UpdateDatasetConnectionResponse {
}

message CreateDatasetRequest {
    string report_id = 1;
}

message CreateDatasetResponse {
}

message CreateFileRequest {
    string dataset_id = 1;
}

message CreateFileResponse {
    string file_id = 1;
}

message CreateQueryRequest {
    string dataset_id = 1;
}

message CreateQueryResponse {
    Query query = 1;
}

message ReportStreamRequest {
    Report report = 1;
    StreamOptions stream_options = 2;
}

message ReportStreamResponse {
    Report report = 1;
    repeated Query queries = 2;
    StreamOptions stream_options = 3;
    repeated Dataset datasets = 4;
    repeated File files = 5;
    repeated Connection connections = 6;
}

message ForkReportRequest {
    string report_id = 1;
}

message ForkReportResponse {
    string report_id = 1;
}

message CreateReportRequest {

}

message CreateReportResponse {
    Report report = 1;
}